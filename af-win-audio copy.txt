using System;
using System.Linq;
using System.Threading;
using System.Text.Json;
using System.Text.Encodings.Web;
using System.Text.Unicode;
using NAudio.CoreAudioApi;
using System.Runtime.InteropServices;
using System.Collections.Generic;

class AudioDeviceInfo
{
    public string Id { get; set; } = string.Empty;
    public string Name { get; set; } = string.Empty;
    public string DataFlow { get; set; } = string.Empty;
    public bool isDefault { get; set; }
    public float Volume { get; set; }
    public bool IsMuted { get; set; }
    public int Channels { get; set; }
    public int BitDepth { get; set; }
    public int SampleRate { get; set; }
}

class Program
{
    private static MMDeviceEnumerator enumerator = new MMDeviceEnumerator();
    private static AudioDeviceInfo[] previousDevices = new AudioDeviceInfo[0];
    private static AudioDeviceInfo[] currentDevices = new AudioDeviceInfo[0];
    private static Timer timer = new Timer(_ => { });

    // Массив для хранения действий (типы операций)
    private static List<string> actionList = new List<string>();
    // Словарь флагов действий
    private static Dictionary<string, bool> actionFlag = new Dictionary<string, bool>
    {
        { "add", false },
        { "remove", false },
        { "volume", false },
        { "muted", false },
        { "default", false },
    };

    static void Main(string[] args)
    {
        InitializeDevices();

        timer = new Timer(CheckDevices, null, 0, 100);

        Console.ReadLine();
        DisposeResources();
    }

    private static void InitializeDevices()
    {
        var devices = enumerator.EnumerateAudioEndPoints(DataFlow.All, DeviceState.Active).ToList();
        MMDevice? deviceDefaultRender = null;
        MMDevice? deviceDefaultCapture = null;

        try
        {
            deviceDefaultRender = enumerator.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);
        }
        catch (System.Exception) { }
        try
        {
            deviceDefaultCapture = enumerator.GetDefaultAudioEndpoint(DataFlow.Capture, Role.Multimedia);
        }
        catch (System.Exception) { }

        // Преобразуем в массив
        previousDevices = devices.Select(device =>
        {
            var isDefault = (deviceDefaultRender != null && device.ID == deviceDefaultRender.ID) ||
                            (deviceDefaultCapture != null && device.ID == deviceDefaultCapture.ID);
            return GetDeviceInfo(device, isDefault);
        }).ToArray();

        var options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.All),
            WriteIndented = true
        };

        var response = new
        {
            data = previousDevices,
            action = new[] { "initial" }
        };

        Console.WriteLine(JsonSerializer.Serialize(response, options));
    }

    private static void CheckDevices(object? state)
    {
        actionList.Clear();
        var devices = enumerator.EnumerateAudioEndPoints(DataFlow.All, DeviceState.Active).ToList();
        MMDevice? deviceDefaultRender = null;
        MMDevice? deviceDefaultCapture = null;

        try
        {
            deviceDefaultRender = enumerator.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);
        }
        catch (System.Exception) { }
        try
        {
            deviceDefaultCapture = enumerator.GetDefaultAudioEndpoint(DataFlow.Capture, Role.Multimedia);
        }
        catch (System.Exception) { }

        // Преобразуем текущие устройства в массив
        currentDevices = devices.Select(device =>
        {
            var isDefault = (deviceDefaultRender != null && device.ID == deviceDefaultRender.ID) ||
                            (deviceDefaultCapture != null && device.ID == deviceDefaultCapture.ID);
            return GetDeviceInfo(device, isDefault);
        }).ToArray();

        // Проверка на добавленные устройства
        foreach (var currentDevice in currentDevices)
        {
            if (!previousDevices.Any(p => p.Id == currentDevice.Id)) // Устройство добавлено
            {
                actionFlag["add"] = true;
            }
        }

        // Проверка на удаленные устройства
        foreach (var previousDevice in previousDevices)
        {
            if (!currentDevices.Any(c => c.Id == previousDevice.Id)) // Устройство удалено
            {
                actionFlag["remove"] = true;
            }
        }

        // Проверка на изменение громкости
        foreach (var currentDevice in currentDevices)
        {
            var previousDevice = previousDevices.FirstOrDefault(p => p.Id == currentDevice.Id);
            if (previousDevice != null)
            {
                // Проверка изменения громкости
                if (previousDevice.Volume != currentDevice.Volume)
                {
                    actionFlag["volume"] = true; // Если громкость изменилась, добавляем действие "volume"
                }

                // Проверка изменения состояния "mute"
                if (previousDevice.IsMuted != currentDevice.IsMuted)
                {
                    actionFlag["muted"] = true; // Если состояние mute изменилось, добавляем действие "muted"
                }

                // Проверка изменения "isDefault"
                if (previousDevice.isDefault != currentDevice.isDefault)
                {
                    actionFlag["default"] = true; // Если isDefault изменилось, добавляем действие "default"
                }
            }
        }

        foreach (var flag in actionFlag)
        {
            if (flag.Value)
            {
                actionList.Add(flag.Key);
                actionFlag[flag.Key] = false;
            }
        }

        // Вывод обновлённого состояния при обнаружении изменений
        if (actionList.Count > 0)
        {
            var options = new JsonSerializerOptions
            {
                Encoder = JavaScriptEncoder.Create(UnicodeRanges.All),
                WriteIndented = true
            };

            var response = new
            {
                data = currentDevices,
                action = actionList.ToArray()
            };

            Console.WriteLine(JsonSerializer.Serialize(response, options));
        }

        previousDevices = currentDevices.ToArray(); // Обновляем предыдущие устройства
    }

    private static AudioDeviceInfo GetDeviceInfo(MMDevice device, bool isDefault)
    {
        try
        {
            return new AudioDeviceInfo
            {
                Id = device.ID,
                Name = device.FriendlyName,
                DataFlow = GetDataFlowString(device.DataFlow),
                isDefault = isDefault,
                Volume = device.AudioEndpointVolume != null ? (float)Math.Round(device.AudioEndpointVolume.MasterVolumeLevelScalar * 100) : 0,
                IsMuted = device.AudioEndpointVolume?.Mute ?? false,
                Channels = device.AudioClient != null ? device.AudioClient.MixFormat.Channels : 0,
                BitDepth = device.AudioClient != null ? device.AudioClient.MixFormat.BitsPerSample : 0,
                SampleRate = device.AudioClient != null ? device.AudioClient.MixFormat.SampleRate : 0
            };
        }
        catch (COMException ex)
        {
            Console.WriteLine($"Ошибка при получении AudioClient для устройства {device.FriendlyName}: {ex.Message}");

            return new AudioDeviceInfo
            {
                Id = device.ID,
                Name = device.FriendlyName,
                DataFlow = GetDataFlowString(device.DataFlow),
                isDefault = isDefault,
                Volume = 0,
                IsMuted = false,
                Channels = 0,
                BitDepth = 0,
                SampleRate = 0
            };
        }
    }

    private static string GetDataFlowString(DataFlow dataFlow)
    {
        return dataFlow switch
        {
            DataFlow.Render => "Render",
            DataFlow.Capture => "Capture",
            _ => "Unknown"
        };
    }

    private static void DisposeResources()
    {
        timer?.Dispose();
        enumerator?.Dispose();
        Console.WriteLine("Ресурсы освобождены.");
    }
}
